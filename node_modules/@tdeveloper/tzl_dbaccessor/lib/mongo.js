var MongoClient = require('mongodb').MongoClient;
var Promise = require('bluebird');


var Mongo = function (config) {

    this.config = config;
    this.client = null;

    this.connect(config);

};
module.exports = Mongo;

Mongo.prototype.connect = function () {

    var self = this;

    var config = self.config;

    self.getUrl(config, function (url) {

        console.log("URL ::", url);

        if (url) {

            MongoClient.connect(url, {useNewUrlParser: true}, function (err, db) {
                if (err) throw err;
                else {
                    var dbo = db.db(config.schema);
                    if (dbo) {
                        self.client = dbo;
                        console.log("\nMongoDB Connected to [HOST : " + config.host + "] [PORT : " + config.port + "] [SCHEMA : " + config.schema + "]");
                    }

                }

            });
        } else {

            throw "MongoDB connection Error";
        }

    })
};


Mongo.prototype.insert = function (collectionName, criteria, callback) {

    var self = this;

    criteria && criteria._id ? delete criteria._id : "";

    if (typeof criteria === "object" && criteria.length && criteria.length > 0) {

        self.client.collection(collectionName).insertMany(criteria, function (err, result) {
            // if(err) throw err;
            callback(err, result.ops);
        })
    } else {

        self.client.collection(collectionName).insertOne(criteria, function (err, result) {
            // if(err) throw err;
            callback(err, result.ops[0]);
        })
    }
};
//Deprecated method (save) -- use insert method
Mongo.prototype.save = function (collectionName, criteria, callback) {

    var self = this;

    criteria && criteria._id ? delete criteria._id : "";

    self.client.collection(collectionName).save(criteria, function (err, result) {
        // if(err) throw err;
        callback(err, result.ops[0]);
    })

};

Mongo.prototype.find = function (collectionName, criteria, callback) {

    var self = this;

    self.client.collection(collectionName).find(criteria.condition ? criteria.condition : {}, criteria.projection ? criteria : {}).limit(criteria.pagination && criteria.pagination.limit ? criteria.pagination.limit : 0).skip(criteria.pagination && criteria.pagination.skip ? criteria.pagination.skip : 0).sort(criteria.sort ? criteria.sort : {}).toArray(function (err, result) {
        // if(err) throw err;
        callback(err, result);
    });
};

Mongo.prototype.findOne = function (collectionName, criteria, callback) {

    var self = this;

    self.client.collection(collectionName).findOne(criteria.condition ? criteria.condition : {}, criteria.projection ? criteria : {}, function (err, result) {
        // if(err) throw err;
        callback(err, result);
    });
};


Mongo.prototype.updateOne = function (collectionName, criteria, callback) {

    var self = this;

    self.client.collection(collectionName).updateOne(criteria.condition ? criteria.condition : {}, criteria.value ? criteria.value : {}, criteria.options ? criteria.options : {}, function (err, result) {
        // if(err) throw err;
        callback(err, result.result.n);
    });


};
Mongo.prototype.updateMany = function (collectionName, criteria, callback) {

    var self = this;

    self.client.collection(collectionName).updateMany(criteria.condition ? criteria.condition : {}, criteria.value ? criteria.value : {}, criteria.options ? criteria.options : {}, function (err, result) {
        // if(err) throw err;
        callback(err, result.result.n);
    });


};


Mongo.prototype.count = function (collectionName, criteria, callback) {

    var self = this;

    self.client.collection(collectionName).countDocuments(criteria.condition ? criteria.condition : {}, function (err, result) {
        // if(err) throw err;
        callback(err, result);
    });
};


Mongo.prototype.distinct = function (collectionName, criteria, callback) {

    var self = this;

    self.client.collection(collectionName).distinct(criteria.field ? criteria.field : "", criteria.condition ? criteria.condition : {}, function (err, result) {
        // if(err) throw err;
        callback(err, result);
    });
};


Mongo.prototype.removeOne = function (collectionName, criteria, callback) {

    var self = this;

    self.client.collection(collectionName).deleteOne(criteria.condition ? criteria.condition : {}, function (err, result) {
        // if(err) throw err;
        callback(err, result.result.n);
    });
};

Mongo.prototype.removeMany = function (collectionName, criteria, callback) {

    var self = this;

    self.client.collection(collectionName).deleteMany(criteria.condition ? criteria.condition : {}, function (err, result) {
        // if(err) throw err;
        callback(err, result.result.n);
    });
};

Mongo.prototype.drop = function (collectionName, callback) {

    var self = this;


    self.client.collection(collectionName).drop(function (err, result) {
        // if(err) throw err;
        callback(err, result);
    });

};


Mongo.prototype.getUrl = function (config, callback) {

    var url = "";
    if (config.auth) {

        url = config.api + "://" + config.username + ":" + config.password + "@" + config.host + ":" + config.port + "/"

        //url = 'mongodb://fleet-dev-db-admin:qW3$9Tn*3@54.208.114.186:12346?authMechanism=DEFAULT&authSource=admin'
    } else {
        url = config.api + "://" + config.host + ":" + config.port + "/"
    }

    if (config && config.replica && config.replica.enable) {

        //url = config.api+"://"+config.host+":"+config.port+"/"

        if (config.replica && config.replica.replicas && config.replica.replicas.length > 0) {

            //mongodb://example1.com,example2.com,example3.com/?replicaSet=test&readPreference=secondar

            return Promise.each(config.replica.replicas, function (replica) {

                url = url + "," + replica.host + ":" + replica.port

                return replica;

            })

                .then(function () {

                    url = url + "?replicaSet=" + config.replica.replicaName + "&readPreference=" + config.replica.readPreference;
                    if (config.auth) {
                        url = url + "authMechanism=DEFAULT&authSource=" + config.authSource
                    }
                    callback(url);
                })


        } else {
            //url = config.api+"://"+config.host+":"+config.port+"/";
            if (config.auth) {
                url = url + "?authMechanism=DEFAULT&authSource=" + config.authSource
            }
            callback(url);
        }


    } else {
        //url = config.api+"://"+config.host+":"+config.port+"/";
        if (config.auth) {
            url = url + "?authMechanism=DEFAULT&authSource=" + config.authSource
        }
        callback(url);
    }
};
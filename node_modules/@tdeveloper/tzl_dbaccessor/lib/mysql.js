var _ = require("underscore");

var knex;
var bookshelf;

// DB Connection using schema,username and password via knex

module.exports.connect = function (config, callback) {

    if (config.username && config.password && config.schema && config.port) {

        knex = require('knex')({

            client: 'mysql',
            connection: {

                host: config.host,
                port: config.port,
                user: config.username,
                password: config.password,
                database: config.schema,
                charset: 'utf8'
            }

        });

        bookshelf = require('bookshelf')(knex);

        bookshelf.plugin('pagination');

        console.log("****Aurora Database Connected Successfully!!!****", "\n", config);

    } else {
        console.log("Authentication failed to connect DB Server");
    }

};


// create  one table and more than one table [including primary key and foreign key]

module.exports.create = function (tableName, criteria, callback) {

    _.each(tableName, function (first, index) {

        _.each(criteria.condition, function (condition, conditionIndex) {
            if (conditionIndex === index) {
                knex.schema.hasTable(first).then(function (exists) {

                    if (!exists) {


                        knex.schema.createTable(first, function (table, err) {


                            _.each(condition, function (conditionfirst, index) {

                                console.log(Object.keys(conditionfirst))

                                if (conditionfirst.type === 'int' && conditionfirst.autoIncrement === 'yes') {

                                    table.increments(conditionfirst.fieldName);

                                } else if (conditionfirst.type === 'int' && conditionfirst.foreignType === "yes") {

                                    table.integer(conditionfirst.fieldName).unsigned();
                                    table.foreign(conditionfirst.fieldName).references("id").inTable(conditionfirst.referenceCollection)
                                } else if (conditionfirst.type === 'int') {

                                    (conditionfirst.unique && conditionfirst.unique === 'yes') ? table.integer(conditionfirst.fieldName).unique() : table.integer(conditionfirst.fieldName)

                                } else if (conditionfirst.type === 'boolean') {

                                    table.boolean(conditionfirst.fieldName)

                                } else if ((conditionfirst.type === 'varchar' && conditionfirst.length)) {


                                    (conditionfirst.unique && conditionfirst.unique === 'yes') ? table.string(conditionfirst.fieldName, [conditionfirst.length]).unique() : table.string(conditionfirst.fieldName, [conditionfirst.length])
                                } else if (conditionfirst.type === 'bigint') {

                                    (conditionfirst.unique && conditionfirst.unique === 'yes') ? table.bigInteger(conditionfirst.fieldName).unique() : table.bigInteger(conditionfirst.fieldName);
                                } else if (conditionfirst.type === 'float') {

                                    table.float(conditionfirst.fieldName);

                                } else if (conditionfirst.type === 'double') {

                                    table.double(conditionfirst.fieldName);
                                } else if (conditionfirst.type === 'datetime') {

                                    table.dateTime(conditionfirst.fieldName);

                                } else if (conditionfirst.type === 'time') {

                                    table.time(conditionfirst.fieldName);

                                } else if (conditionfirst.type === 'date') {

                                    table.date(conditionfirst.fieldName);

                                } else if (conditionfirst.type === 'json') {

                                    table.json(conditionfirst.fieldName);

                                }

                            });
                        })
                            .then(function (result) {
                                var success = {

                                    tableName: first,
                                    message: "TABLE CREATED SUCCESSFULLY"
                                }
                                callback(null, result ? success : null)
                            })
                            .catch(function (err) {
                                var error = {

                                    code: err.code,
                                    state: err.sqlState,
                                    message: err.sqlMessage,
                                    query: err.sql

                                }
                                callback(error, null)
                            });
                    } else {

                        var failure = {

                            tableName: first,
                            message: "TABLE ALREADY EXISTS"
                        }
                        callback(null, failure ? failure : null)
                    }
                })
            }
        })

    })
};

//insert record in table

module.exports.insert = function (collectionName, criteria, callback) {

    knex(collectionName).insert(criteria)

        .then(function (result) {
            var success = {

                tableName: collectionName,
                message: "RECORD INSERTED SUCCESSFULLY"
            }
            callback(null, result ? success : null)

        })
        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql

            }

            callback(error, null)
        });
};


//find All record  with pagination in table

module.exports.findWithPagination = function (collectionName, criteria, callback) {

    // Based on single criteria
    //Based on search for,search value,pagination,sort

    var searchFor = criteria.condition ? (criteria.condition.searchFor ? criteria.condition.searchFor : "") : "";
    var searchValue = criteria.condition ? (criteria.condition.searchValue ? criteria.condition.searchValue : "") : "";


    if (searchFor && searchValue) {

        if (criteria.type === 'distinct') {

            knex(collectionName).distinct(criteria.columns.columnNames).where(searchFor, "like", searchValue).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)

                .then(function (result) {


                    var success = {

                        tableName: collectionName,
                        findResult: result,
                    };
                    callback(null, success ? success : null)

                })


                .catch(function (err) {

                    var error = {

                        code: err.code,
                        state: err.sqlState,
                        message: err.sqlMessage,
                        query: err.sql

                    };
                    callback(error, null)
                });
        } else {


            knex(collectionName).select(criteria.columns.columnNames).where(searchFor, "like", searchValue).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)

                .then(function (result) {


                    var success = {

                        tableName: collectionName,
                        findResult: result,
                    };
                    callback(null, success ? success : null)

                })


                .catch(function (err) {

                    var error = {

                        code: err.code,
                        state: err.sqlState,
                        message: err.sqlMessage,
                        query: err.sql

                    };
                    callback(error, null)
                })
        }

    } else if (criteria.sort && criteria.sort.sortField && criteria.sort.sortOrder) {

        if (criteria.type === 'distinct') {

            knex(collectionName).distinct(criteria.columns.columnNames).where(criteria.condition).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)

                .then(function (result) {


                    var success = {

                        tableName: collectionName,
                        findResult: result,
                    };
                    callback(null, success ? success : null)

                })


                .catch(function (err) {

                    var error = {

                        code: err.code,
                        state: err.sqlState,
                        message: err.sqlMessage,
                        query: err.sql

                    };
                    callback(error, null)
                });
        } else {

            knex(collectionName).select(criteria.columns.columnNames).where(criteria.condition).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)

                .then(function (result) {


                    var success = {

                        tableName: collectionName,
                        findResult: result
                    };
                    callback(null, success ? success : null)

                })


                .catch(function (err) {

                    var error = {

                        code: err.code,
                        state: err.sqlState,
                        message: err.sqlMessage,
                        query: err.sql

                    };
                    callback(error, null)
                });
        }


    } else {

        if (criteria.type === "distinct") {

            knex(collectionName).distinct(criteria.columns.columnNames).where(criteria.condition).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


                .then(function (result) {


                    var success = {

                        tableName: collectionName,
                        findResult: result
                    };
                    callback(null, success ? success : null)

                })

                .catch(function (err) {

                    var error = {

                        code: err.code,
                        state: err.sqlState,
                        message: err.sqlMessage,
                        query: err.sql

                    };
                    callback(error, null)
                });
        } else {

            knex(collectionName).select(criteria.columns.columnNames).where(criteria.condition).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


                .then(function (result) {


                    var success = {

                        tableName: collectionName,
                        findResult: result
                    };
                    callback(null, success ? success : null)

                })

                .catch(function (err) {

                    var error = {

                        code: err.code,
                        state: err.sqlState,
                        message: err.sqlMessage,
                        query: err.sql

                    };
                    callback(error, null)
                });
        }


    }

};


module.exports.find = function (collectionName, criteria, callback) {

    // Based on single criteria
    //Based on search for,search value,pagination,sort


    var model = bookshelf.Model.extend({
        tableName: collectionName
    });


    if (!_.isEmpty(criteria) && !_.isEmpty(criteria.condition) && !_.isEmpty(criteria.search)) {
        model = model.query(function (qb) {
            qb.where(criteria.search.searchFor, "LIKE", "%" + criteria.search.searchValue + "%")
        }).where(criteria.condition)
    } else if (!_.isEmpty(criteria) && !_.isEmpty(criteria.condition)) {
        model = model.where(criteria.condition)
    } else if (!_.isEmpty(criteria) && !_.isEmpty(criteria.search)) {
        model = model.query(function (qb) {
            qb.where(criteria.search.searchFor, "LIKE", "%" + criteria.search.searchValue + "%")
        })
    } else {
        model = model.where({})
    }

    if (!_.isEmpty(criteria) && criteria.sort && criteria.sort.sortField && criteria.sort.sortOrder) {

        model = model.orderBy(criteria.sort.sortField, criteria.sort.sortOrder)

    }

    var pagination = {
        columns: !_.isEmpty(criteria) && criteria.columnNames ? criteria.columnNames : '*'
    };
    !_.isEmpty(criteria) && criteria.pagination && criteria.pagination.limit ? pagination['limit'] = Number(criteria.pagination.limit) : '';
    !_.isEmpty(criteria) && criteria.pagination && criteria.pagination.offset ? pagination['offset'] = Number(criteria.pagination.offset) : '';

    model.fetchPage(pagination)
        .then(function (result) {
            var success = {

                tableName: collectionName,
                findResult: result.toJSON()
            };
            callback(null, success ? success : null)
        })
        .catch(function (err) {

            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql

            };
            callback(error, null)
        });

};


// find all record

module.exports.findAll = function (collectionName, criteria, callback) {

    knex(collectionName).where(criteria.condition).select(criteria.columns.columnNames)

        .then(function (result) {
            var success = {

                tableName: collectionName,
                findResult: result
            }

            callback(null, success ? success : null)

        })

        .catch(function (err) {

            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql

            }
            callback(error, null)
        });
}


//count

module.exports.count = function (tableName, criteria, callback) {

    bookshelf.knex(tableName).count().where(criteria.condition)


        .then(function (result) {
            var success = {

                tableName: tableName,
                count: result[0]['count(*)']
            }
            callback(null, success ? success : null)
        })

        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql

            }
            callback(error, null)
        });
};

//update value in row

module.exports.update = function (collectionName, criteria, callback) {


    bookshelf.knex(collectionName).where(criteria.condition).update(criteria.value.$set)

        .then(function (result) {

            if (result === 1) {

                var success = {

                    tableName: collectionName,
                    message: "Updated value successfully",
                    updated: true

                }

                callback(null, success ? success : null)
            } else {

                var updateError = {

                    tableName: collectionName,
                    message: "Updated value is not present in table",
                    updated: false


                }

                callback(null, updateError ? updateError : null)
            }

        })
        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql

            }
            callback(error, null)
        });

};


//remove record in table

module.exports.remove = function (collectionName, criteria, callback) {


    bookshelf.knex(collectionName).where(criteria.condition).del()

        .then(function (result) {
            if (result === 1) {

                var success = {

                    tableName: collectionName,
                    message: "Record removed successfully",
                    removed: true

                }

                callback(null, success ? success : null)
            } else {

                var removeError = {

                    tableName: collectionName,
                    message: "Condition value is not present in table",
                    updated: false


                }

                callback(null, removeError ? removeError : null)
            }


        })
        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql

            }
            callback(error, null)
        });


};


//To find unique record in table

module.exports.distinct = function (collectionName, criteria, callback) {


    bookshelf.knex(collectionName).distinct(criteria.fieldName)

        .then(function (result) {


            var success = {

                tableName: collectionName,
                distinctValue: result

            }

            callback(null, success ? success : null)
        })


        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql

            }
            callback(error, null)
        });

};


//Find single record

module.exports.findOne = function (collectionName, criteria, callback) {


    knex(collectionName).where(criteria.condition).select(criteria.columns.columnNames).limit(1)

        .then(function (result) {
            var success = {

                tableName: collectionName,
                findResult: result[0]
            }

            callback(null, success ? success : null)

        })

        .catch(function (err) {

            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql

            }
            callback(error, null)
        });
};


//single field with multiple values condition whereIn and NotIn and with pagination//

module.exports.findWhereInNotInWithPagination = function (collectionName, criteria, callback) {

    var conditionLength = Object.keys(criteria.condition).length;

    var inLength = Object.keys(criteria.condition.in).length;

    var notInLength = Object.keys(criteria.condition.notIn).length;


    validateWithPagination(collectionName, criteria, conditionLength, inLength, notInLength, callback)


};

validateWithPagination = function (collectionName, criteria, conditionLength, inLength, notInLength, callback) {


    // in and not in condition

    if ((criteria.condition && criteria.condition.in && criteria.condition.notIn) && (inLength === 1 && notInLength === 1)) {


        var inKey = Object.keys(criteria.condition.in)[0];
        var inValue = Object.values(criteria.condition.in)[0];

        var notKey = Object.keys(criteria.condition.notIn)[0];
        var notValue = Object.values(criteria.condition.notIn)[0];


        knex.select(criteria.columns.columnNames).from(collectionName).whereIn(inKey, inValue).whereNotIn(notKey, notValue).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


            .then(function (result) {

                var success = {

                    tableName: collectionName,
                    findResult: result
                };


                callback(null, success ? success : null)
            })

            .catch(function (err) {


                var error = {
                    code: err.code,
                    state: err.sqlState,
                    message: err.sqlMessage,
                    query: err.sql
                };

                callback(error, null);


            });


    } else if ((criteria.condition && criteria.condition.in && criteria.condition.notIn) && (inLength === 1 && notInLength === 2)) {


        var inKey = Object.keys(criteria.condition.in)[0];
        var inValue = Object.values(criteria.condition.in)[0];


        var notKey = Object.keys(criteria.condition.notIn)[0];
        var notValue = Object.values(criteria.condition.notIn)[0];


        var notKey1 = Object.keys(criteria.condition.notIn)[1];
        var notValue1 = Object.values(criteria.condition.notIn)[1];


        knex.select(criteria.columns.columnNames).from(collectionName).whereIn(inKey, inValue).whereNotIn(notKey, notValue).whereNotIn(notKey1, notValue1).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


            .then(function (result) {

                var success = {

                    tableName: collectionName,
                    findResult: result
                };


                callback(null, success ? success : null)
            })

            .catch(function (err) {


                var error = {
                    code: err.code,
                    state: err.sqlState,
                    message: err.sqlMessage,
                    query: err.sql
                };

                callback(error, null);


            });


    } else if ((criteria.condition && criteria.condition.in && criteria.condition.notIn) && (inLength === 1 && notInLength === 3)) {


        var inKey = Object.keys(criteria.condition.in)[0];
        var inValue = Object.values(criteria.condition.in)[0];


        var notKey = Object.keys(criteria.condition.notIn)[0];
        var notValue = Object.values(criteria.condition.notIn)[0];


        var notKey1 = Object.keys(criteria.condition.notIn)[1];
        var notValue1 = Object.values(criteria.condition.notIn)[1];


        var notKey2 = Object.keys(criteria.condition.notIn)[2];
        var notValue2 = Object.values(criteria.condition.notIn)[2];


        knex.select(criteria.columns.columnNames).from(collectionName).whereIn(inKey, inValue).whereNotIn(notKey, notValue).whereNotIn(notKey1, notValue1).whereNotIn(notKey2, notValue2).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


            .then(function (result) {

                var success = {

                    tableName: collectionName,
                    findResult: result
                };


                callback(null, success ? success : null)
            })

            .catch(function (err) {


                var error = {
                    code: err.code,
                    state: err.sqlState,
                    message: err.sqlMessage,
                    query: err.sql
                };

                callback(error, null);


            });


    } else if ((criteria.condition && criteria.condition.in && criteria.condition.notIn) && (inLength === 2 && notInLength === 1)) {


        var inKey = Object.keys(criteria.condition.in)[0];
        var inValue = Object.values(criteria.condition.in)[0];


        var inKey1 = Object.keys(criteria.condition.in)[1];
        var inValue1 = Object.values(criteria.condition.in)[1];

        var notKey = Object.keys(criteria.condition.notIn)[0];
        var notValue = Object.values(criteria.condition.notIn)[0];


        knex.select(criteria.columns.columnNames).from(collectionName).whereIn(inKey, inValue).whereIn(inKey1, inValue1).whereNotIn(notKey, notValue).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


            .then(function (result) {

                var success = {

                    tableName: collectionName,
                    findResult: result
                };


                callback(null, success ? success : null)
            })

            .catch(function (err) {


                var error = {
                    code: err.code,
                    state: err.sqlState,
                    message: err.sqlMessage,
                    query: err.sql
                };

                callback(error, null);


            });


    } else if ((criteria.condition && criteria.condition.in && criteria.condition.notIn) && (inLength === 2 && notInLength === 2)) {


        var inKey = Object.keys(criteria.condition.in)[0];
        var inValue = Object.values(criteria.condition.in)[0];


        var inKey1 = Object.keys(criteria.condition.in)[1];
        var inValue1 = Object.values(criteria.condition.in)[1];

        var notKey = Object.keys(criteria.condition.notIn)[0];
        var notValue = Object.values(criteria.condition.notIn)[0];


        var notKey1 = Object.keys(criteria.condition.notIn)[1];
        var notValue1 = Object.values(criteria.condition.notIn)[1];


        knex.select(criteria.columns.columnNames).from(collectionName).whereIn(inKey, inValue).whereIn(inKey1, inValue1).whereNotIn(notKey, notValue).whereNotIn(notKey1, notValue1).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


            .then(function (result) {

                var success = {

                    tableName: collectionName,
                    findResult: result
                };


                callback(null, success ? success : null)
            })

            .catch(function (err) {


                var error = {
                    code: err.code,
                    state: err.sqlState,
                    message: err.sqlMessage,
                    query: err.sql
                };

                callback(error, null);


            });


    } else if ((criteria.condition && criteria.condition.in && criteria.condition.notIn) && (inLength === 2 && notInLength === 3)) {


        var inKey = Object.keys(criteria.condition.in)[0];
        var inValue = Object.values(criteria.condition.in)[0];


        var inKey1 = Object.keys(criteria.condition.in)[1];
        var inValue1 = Object.values(criteria.condition.in)[1];

        var notKey = Object.keys(criteria.condition.notIn)[0];
        var notValue = Object.values(criteria.condition.notIn)[0];


        var notKey1 = Object.keys(criteria.condition.notIn)[1];
        var notValue1 = Object.values(criteria.condition.notIn)[1];

        var notKey2 = Object.keys(criteria.condition.notIn)[1];
        var notValue2 = Object.values(criteria.condition.notIn)[1];


        knex.select(criteria.columns.columnNames).from(collectionName).whereIn(inKey, inValue).whereIn(inKey1, inValue1).whereNotIn(notKey, notValue).whereNotIn(notKey1, notValue1).whereNotIn(notKey2, notValue2).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


            .then(function (result) {

                var success = {

                    tableName: collectionName,
                    findResult: result
                };


                callback(null, success ? success : null)
            })

            .catch(function (err) {


                var error = {
                    code: err.code,
                    state: err.sqlState,
                    message: err.sqlMessage,
                    query: err.sql
                };

                callback(error, null);


            });


    }




    // in condition

    else if (criteria.condition && criteria.condition.in && inLength === 1) {


        var key = Object.keys(criteria.condition.in)[0];
        var value = Object.values(criteria.condition.in)[0];

        knex.select(criteria.columns.columnNames).from(collectionName).whereIn(key, value).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


            .then(function (result) {

                var success = {

                    tableName: collectionName,
                    findResult: result
                };


                callback(null, success ? success : null)
            })

            .catch(function (err) {


                var error = {
                    code: err.code,
                    state: err.sqlState,
                    message: err.sqlMessage,
                    query: err.sql
                };

                callback(error, null);


            });


    } else if (criteria.condition && criteria.condition.in && inLength === 2) {


        var key = Object.keys(criteria.condition.in)[0];
        var value = Object.values(criteria.condition.in)[0];


        var key1 = Object.keys(criteria.condition.in)[1];
        var value1 = Object.values(criteria.condition.in)[1];

        knex.select(criteria.columns.columnNames).from(collectionName).whereIn(key, value).whereIn(key1, value1).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


            .then(function (result) {

                var success = {

                    tableName: collectionName,
                    findResult: result
                };


                callback(null, success ? success : null)
            })

            .catch(function (err) {


                var error = {
                    code: err.code,
                    state: err.sqlState,
                    message: err.sqlMessage,
                    query: err.sql
                };

                callback(error, null);


            });


    } else if (criteria.condition && criteria.condition.in && inLength === 3) {


        var key = Object.keys(criteria.condition.in)[0];
        var value = Object.values(criteria.condition.in)[0];


        var key1 = Object.keys(criteria.condition.in)[1];
        var value1 = Object.values(criteria.condition.in)[1];

        var key2 = Object.keys(criteria.condition.in)[2];
        var value2 = Object.values(criteria.condition.in)[2];

        knex.select(criteria.columns.columnNames).from(collectionName).whereIn(key, value).whereIn(key1, value1).whereIn(key2, value2).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


            .then(function (result) {

                var success = {

                    tableName: collectionName,
                    findResult: result
                };


                callback(null, success ? success : null)
            })

            .catch(function (err) {


                var error = {
                    code: err.code,
                    state: err.sqlState,
                    message: err.sqlMessage,
                    query: err.sql
                };

                callback(error, null);


            });


    }


    // not in condition

    else if (criteria.condition && criteria.condition.notIn && notInLength === 1) {


        var key = Object.keys(criteria.condition.notIn)[0];
        var value = Object.values(criteria.condition.notIn)[0];

        knex.select(criteria.columns.columnNames).from(collectionName).whereNotIn(key, value).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


            .then(function (result) {

                var success = {

                    tableName: collectionName,
                    findResult: result
                };


                callback(null, success ? success : null)
            })

            .catch(function (err) {


                var error = {
                    code: err.code,
                    state: err.sqlState,
                    message: err.sqlMessage,
                    query: err.sql
                };

                callback(error, null);


            });


    } else if (criteria.condition && criteria.condition.notIn && notInLength === 2) {


        var key = Object.keys(criteria.condition.notIn)[0];
        var value = Object.values(criteria.condition.notIn)[0];


        var key1 = Object.keys(criteria.condition.notIn)[1];
        var value1 = Object.values(criteria.condition.notIn)[1];

        knex.select(criteria.columns.columnNames).from(collectionName).whereNotIn(key, value).whereNotIn(key1, value1).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


            .then(function (result) {

                var success = {

                    tableName: collectionName,
                    findResult: result
                };


                callback(null, success ? success : null)
            })

            .catch(function (err) {


                var error = {
                    code: err.code,
                    state: err.sqlState,
                    message: err.sqlMessage,
                    query: err.sql
                };

                callback(error, null);


            });


    } else if (criteria.condition && criteria.condition.notIn && notInLength === 3) {


        var key = Object.keys(criteria.condition.notIn)[0];
        var value = Object.values(criteria.condition.notIn)[0];


        var key1 = Object.keys(criteria.condition.notIn)[1];
        var value1 = Object.values(criteria.condition.notIn)[1];

        var key2 = Object.keys(criteria.condition.notIn)[2];
        var value2 = Object.values(criteria.condition.notIn)[2];

        knex.select(criteria.columns.columnNames).from(collectionName).whereNotIn(key, value).whereNotIn(key1, value1).whereNotIn(key2, value2).orderBy(criteria.sort.sortField, criteria.sort.sortOrder).limit(criteria.pagination.limit ? criteria.pagination.limit : 10).offset(criteria.pagination.offset ? criteria.pagination.offset : 0)


            .then(function (result) {

                var success = {

                    tableName: collectionName,
                    findResult: result
                };


                callback(null, success ? success : null)
            })

            .catch(function (err) {


                var error = {
                    code: err.code,
                    state: err.sqlState,
                    message: err.sqlMessage,
                    query: err.sql
                };

                callback(error, null);


            });


    }
};


//JOIN concepts//

module.exports.join = function (collectionName, criteria, callback) {

    const length = collectionName.length;

    switch (length) {

        case 2:

            if (criteria.type === 'view') {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).join(collectionName[1], criteria.condition);

                var key = Object.keys(criteria.condition)[0];
                var value = Object.values(criteria.condition)[0];


                const query = 'create view ' + criteria.viewCollectionName + ' as select ' + criteria.columns.columnNames + ' from ' + collectionName[0] + ' join ' + collectionName[1] + ' where ' + key + '=' + value;

                console.log("View Query :", query);

                knex.raw(query)

                    .then(function (result) {

                        var success = {

                            viewCollectionName: criteria.viewCollectionName,
                            message: "VIEW CREATED SUCCESSFULLY"
                        };

                        callback(null, success ? success : null)
                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;

            } else {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).join(collectionName[1], criteria.condition)

                    .then(function (result) {

                        var success = {

                            findResult: result
                        };

                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;
            }


        case 3 :

            if (criteria.type === 'view') {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).join(collectionName[1]).join(collectionName[2], criteria.condition)

                var keys1 = Object.keys(criteria.condition)[0];
                var keys2 = Object.keys(criteria.condition)[1];
                var values1 = Object.values(criteria.condition)[0];
                var values2 = Object.values(criteria.condition)[1];


                const query = 'create view ' + criteria.viewCollectionName + ' as select ' + criteria.columns.columnNames + ' from ' + collectionName[0] + ' join ' + collectionName[1] + ' join ' + collectionName[2] + ' where ' + keys1 + '=' + values1 + ' and ' + keys2 + '=' + values2

                console.log("View Query :", query);

                knex.raw(query)

                    .then(function (result) {

                        var success = {

                            viewCollectionName: criteria.viewCollectionName,
                            message: "VIEW CREATED SUCCESSFULLY"
                        };

                        callback(null, success ? success : null)
                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;

            } else {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).join(collectionName[1]).join(collectionName[2], criteria.condition)

                    .then(function (result) {

                        var success = {

                            findResult: result
                        };

                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;
            }


        case 4 :

            if (criteria.type === 'view') {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).join(collectionName[1]).join(collectionName[2]).join(collectionName[3], criteria.condition)


                var keys1 = Object.keys(criteria.condition)[0];
                var keys2 = Object.keys(criteria.condition)[1];
                var keys3 = Object.keys(criteria.condition)[2];

                var values1 = Object.values(criteria.condition)[0];
                var values2 = Object.values(criteria.condition)[1];
                var values3 = Object.values(criteria.condition)[2];


                const query = 'create view ' + criteria.viewCollectionName + ' as select ' + criteria.columns.columnNames + ' from ' + collectionName[0] + ' join ' + collectionName[1] + ' join ' + collectionName[2] + ' join ' + collectionName[3] + ' where ' + keys1 + '=' + values1 + ' and ' + keys2 + '=' + values2 + ' and ' + keys3 + '=' + values3;

                console.log("View Query :", query);

                knex.raw(query)

                    .then(function (result) {

                        var success = {

                            viewCollectionName: criteria.viewCollectionName,
                            message: "VIEW CREATED SUCCESSFULLY"
                        };

                        callback(null, success ? success : null)
                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;
            } else {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).join(collectionName[1]).join(collectionName[2]).join(collectionName[3], criteria.condition)


                    .then(function (result) {

                        var success = {

                            findResult: result
                        };

                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });

                break;
            }


        case 5 :

            if (criteria.type === 'view') {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).join(collectionName[1]).join(collectionName[2]).join(collectionName[3])
                    .join(collectionName[4], criteria.condition);

                var keys1 = Object.keys(criteria.condition)[0];
                var keys2 = Object.keys(criteria.condition)[1];
                var keys3 = Object.keys(criteria.condition)[2];
                var keys4 = Object.keys(criteria.condition)[3];


                var values1 = Object.values(criteria.condition)[0];
                var values2 = Object.values(criteria.condition)[1];
                var values3 = Object.values(criteria.condition)[2];
                var values4 = Object.values(criteria.condition)[3];


                const query = 'create view ' + criteria.viewCollectionName + ' as select ' + criteria.columns.columnNames + ' from ' + collectionName[0] + ' join ' + collectionName[1] + ' join ' + collectionName[2] + ' join ' + collectionName[3] + ' join ' + collectionName[4] + ' where ' + keys1 + '=' + values1 + ' and ' + keys2 + '=' + values2 + ' and ' + keys3 + '=' + values3
                    + ' and ' + keys4 + '=' + values4;

                console.log("View Query :", query);

                knex.raw(query)

                    .then(function (result) {

                        var success = {

                            viewCollectionName: criteria.viewCollectionName,
                            message: "VIEW CREATED SUCCESSFULLY"
                        };
                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });

                break;
            } else {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).join(collectionName[1]).join(collectionName[2]).join(collectionName[3])
                    .join(collectionName[4], criteria.condition)

                    .then(function (result) {

                        var success = {

                            findResult: result
                        };

                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });

                break;

            }

        default:

            var error = {
                state: false,
                message: "Join more than 5 collection is not available",
            };
            callback(error, null);
            break;
    }

};

module.exports.rightJoin = function (collectionName, criteria, callback) {

    const length = collectionName.length;

    switch (length) {

        case 2:

            if (criteria.type === 'view') {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).rightJoin(collectionName[1], criteria.condition);

                var key = Object.keys(criteria.condition)[0];
                var value = Object.values(criteria.condition)[0];


                const query = 'create view ' + criteria.viewCollectionName + ' as select ' + criteria.columns.columnNames + ' from ' + collectionName[0] + ' rightJoin ' + collectionName[1] + ' where ' + key + '=' + value;

                console.log("View Query :", query);

                knex.raw(query)

                    .then(function (result) {

                        var success = {

                            viewCollectionName: criteria.viewCollectionName,
                            message: "VIEW CREATED SUCCESSFULLY"
                        };

                        callback(null, success ? success : null)
                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;

            } else {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).rightJoin(collectionName[1], criteria.condition)

                    .then(function (result) {

                        var success = {

                            findResult: result
                        };

                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;
            }


        case 3 :

            if (criteria.type === 'view') {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).rightJoin(collectionName[1]).rightJoin(collectionName[2], criteria.condition)

                var keys1 = Object.keys(criteria.condition)[0];
                var keys2 = Object.keys(criteria.condition)[1];
                var values1 = Object.values(criteria.condition)[0];
                var values2 = Object.values(criteria.condition)[1];


                const query = 'create view ' + criteria.viewCollectionName + ' as select ' + criteria.columns.columnNames + ' from ' + collectionName[0] + ' rightJoin ' + collectionName[1] + ' rightJoin ' + collectionName[2] + ' where ' + keys1 + '=' + values1 + ' and ' + keys2 + '=' + values2

                console.log("View Query :", query);

                knex.raw(query)

                    .then(function (result) {

                        var success = {

                            viewCollectionName: criteria.viewCollectionName,
                            message: "VIEW CREATED SUCCESSFULLY"
                        };

                        callback(null, success ? success : null)
                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;

            } else {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).rightJoin(collectionName[1]).rightJoin(collectionName[2], criteria.condition)

                    .then(function (result) {

                        var success = {

                            findResult: result
                        };

                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;
            }


        case 4 :

            if (criteria.type === 'view') {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).rightJoin(collectionName[1]).rightJoin(collectionName[2]).rightJoin(collectionName[3], criteria.condition)


                var keys1 = Object.keys(criteria.condition)[0];
                var keys2 = Object.keys(criteria.condition)[1];
                var keys3 = Object.keys(criteria.condition)[2];

                var values1 = Object.values(criteria.condition)[0];
                var values2 = Object.values(criteria.condition)[1];
                var values3 = Object.values(criteria.condition)[2];


                const query = 'create view ' + criteria.viewCollectionName + ' as select ' + criteria.columns.columnNames + ' from ' + collectionName[0] + ' rightJoin ' + collectionName[1] + ' rightJoin ' + collectionName[2] + ' rightJoin ' + collectionName[3] + ' where ' + keys1 + '=' + values1 + ' and ' + keys2 + '=' + values2 + ' and ' + keys3 + '=' + values3;

                console.log("View Query :", query);

                knex.raw(query)

                    .then(function (result) {

                        var success = {

                            viewCollectionName: criteria.viewCollectionName,
                            message: "VIEW CREATED SUCCESSFULLY"
                        };

                        callback(null, success ? success : null)
                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;
            } else {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).rightJoin(collectionName[1]).rightJoin(collectionName[2]).rightJoin(collectionName[3], criteria.condition)


                    .then(function (result) {

                        var success = {

                            findResult: result
                        };

                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });

                break;
            }


        case 5 :

            if (criteria.type === 'view') {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).rightJoin(collectionName[1]).rightJoin(collectionName[2]).rightJoin(collectionName[3])
                    .rightJoin(collectionName[4], criteria.condition);

                var keys1 = Object.keys(criteria.condition)[0];
                var keys2 = Object.keys(criteria.condition)[1];
                var keys3 = Object.keys(criteria.condition)[2];
                var keys4 = Object.keys(criteria.condition)[3];


                var values1 = Object.values(criteria.condition)[0];
                var values2 = Object.values(criteria.condition)[1];
                var values3 = Object.values(criteria.condition)[2];
                var values4 = Object.values(criteria.condition)[3];


                const query = 'create view ' + criteria.viewCollectionName + ' as select ' + criteria.columns.columnNames + ' from ' + collectionName[0] + ' rightJoin ' + collectionName[1] + ' rightJoin ' + collectionName[2] + ' rightJoin ' + collectionName[3] + ' rightJoin ' + collectionName[4] + ' where ' + keys1 + '=' + values1 + ' and ' + keys2 + '=' + values2 + ' and ' + keys3 + '=' + values3
                    + ' and ' + keys4 + '=' + values4;

                console.log("View Query :", query);

                knex.raw(query)

                    .then(function (result) {

                        var success = {

                            viewCollectionName: criteria.viewCollectionName,
                            message: "VIEW CREATED SUCCESSFULLY"
                        };
                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });

                break;
            } else {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).rightJoin(collectionName[1]).rightJoin(collectionName[2]).rightJoin(collectionName[3])
                    .rightJoin(collectionName[4], criteria.condition)

                    .then(function (result) {

                        var success = {

                            findResult: result
                        };

                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });

                break;

            }

        default:

            var error = {
                state: false,
                message: "Join more than 5 collection is not available",
            };
            break;
    }


};

module.exports.leftJoin = function (collectionName, criteria, callback) {


    const length = collectionName.length;

    switch (length) {

        case 2:

            if (criteria.type === 'view') {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).leftJoin(collectionName[1], criteria.condition);

                var key = Object.keys(criteria.condition)[0];
                var value = Object.values(criteria.condition)[0];


                const query = 'create view ' + criteria.viewCollectionName + ' as select ' + criteria.columns.columnNames + ' from ' + collectionName[0] + ' leftJoin ' + collectionName[1] + ' where ' + key + '=' + value;

                console.log("View Query :", query);

                knex.raw(query)

                    .then(function (result) {

                        var success = {

                            viewCollectionName: criteria.viewCollectionName,
                            message: "VIEW CREATED SUCCESSFULLY"
                        };

                        callback(null, success ? success : null)
                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;

            } else {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).leftJoin(collectionName[1], criteria.condition)

                    .then(function (result) {

                        var success = {

                            findResult: result
                        };

                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;
            }


        case 3 :

            if (criteria.type === 'view') {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).leftJoin(collectionName[1]).leftJoin(collectionName[2], criteria.condition)

                var keys1 = Object.keys(criteria.condition)[0];
                var keys2 = Object.keys(criteria.condition)[1];
                var values1 = Object.values(criteria.condition)[0];
                var values2 = Object.values(criteria.condition)[1];


                const query = 'create view ' + criteria.viewCollectionName + ' as select ' + criteria.columns.columnNames + ' from ' + collectionName[0] + ' leftJoin ' + collectionName[1] + ' leftJoin ' + collectionName[2] + ' where ' + keys1 + '=' + values1 + ' and ' + keys2 + '=' + values2

                console.log("View Query :", query);

                knex.raw(query)

                    .then(function (result) {

                        var success = {

                            viewCollectionName: criteria.viewCollectionName,
                            message: "VIEW CREATED SUCCESSFULLY"
                        };

                        callback(null, success ? success : null)
                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;

            } else {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).leftJoin(collectionName[1]).leftJoin(collectionName[2], criteria.condition)

                    .then(function (result) {

                        var success = {

                            findResult: result
                        };

                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;
            }


        case 4 :

            if (criteria.type === 'view') {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).leftJoin(collectionName[1]).leftJoin(collectionName[2]).leftJoin(collectionName[3], criteria.condition)


                var keys1 = Object.keys(criteria.condition)[0];
                var keys2 = Object.keys(criteria.condition)[1];
                var keys3 = Object.keys(criteria.condition)[2];

                var values1 = Object.values(criteria.condition)[0];
                var values2 = Object.values(criteria.condition)[1];
                var values3 = Object.values(criteria.condition)[2];


                const query = 'create view ' + criteria.viewCollectionName + ' as select ' + criteria.columns.columnNames + ' from ' + collectionName[0] + ' leftJoin ' + collectionName[1] + ' leftJoin ' + collectionName[2] + ' leftJoin ' + collectionName[3] + ' where ' + keys1 + '=' + values1 + ' and ' + keys2 + '=' + values2 + ' and ' + keys3 + '=' + values3;

                console.log("View Query :", query);

                knex.raw(query)

                    .then(function (result) {

                        var success = {

                            viewCollectionName: criteria.viewCollectionName,
                            message: "VIEW CREATED SUCCESSFULLY"
                        };

                        callback(null, success ? success : null)
                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });
                break;
            } else {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).leftJoin(collectionName[1]).leftJoin(collectionName[2]).leftJoin(collectionName[3], criteria.condition)


                    .then(function (result) {

                        var success = {

                            findResult: result
                        };

                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });

                break;
            }


        case 5 :

            if (criteria.type === 'view') {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).leftJoin(collectionName[1]).leftJoin(collectionName[2]).leftJoin(collectionName[3])
                    .leftJoin(collectionName[4], criteria.condition);

                var keys1 = Object.keys(criteria.condition)[0];
                var keys2 = Object.keys(criteria.condition)[1];
                var keys3 = Object.keys(criteria.condition)[2];
                var keys4 = Object.keys(criteria.condition)[3];


                var values1 = Object.values(criteria.condition)[0];
                var values2 = Object.values(criteria.condition)[1];
                var values3 = Object.values(criteria.condition)[2];
                var values4 = Object.values(criteria.condition)[3];


                const query = 'create view ' + criteria.viewCollectionName + ' as select ' + criteria.columns.columnNames + ' from ' + collectionName[0] + ' leftJoin ' + collectionName[1] + ' leftJoin ' + collectionName[2] + ' leftJoin ' + collectionName[3] + ' leftJoin ' + collectionName[4] + ' where ' + keys1 + '=' + values1 + ' and ' + keys2 + '=' + values2 + ' and ' + keys3 + '=' + values3
                    + ' and ' + keys4 + '=' + values4;

                console.log("View Query :", query);

                knex.raw(query)

                    .then(function (result) {

                        var success = {

                            viewCollectionName: criteria.viewCollectionName,
                            message: "VIEW CREATED SUCCESSFULLY"
                        };
                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });

                break;
            } else {

                knex.select(criteria.columns.columnNames).from(collectionName[0]).leftJoin(collectionName[1]).leftJoin(collectionName[2]).leftJoin(collectionName[3])
                    .leftJoin(collectionName[4], criteria.condition)

                    .then(function (result) {

                        var success = {

                            findResult: result
                        };

                        callback(null, success ? success : null)

                    })

                    .catch(function (err) {

                        var error = {

                            code: err.code,
                            state: err.sqlState,
                            message: err.sqlMessage,
                            query: err.sql

                        };
                        callback(error, null)
                    });

                break;

            }

        default:

            var error = {
                state: false,
                message: "Join more than 5 collection is not available",
            };
            break;
    }


}

module.exports.fullOuterJoin = function (collectionName, criteria, callback) {


    knex.select(criteria.columns.columnNames).from(collectionName[0]).fullOuterJoin(collectionName[1], criteria.condition)


        .then(function (result) {

            var success = {

                findResult: result
            };

            callback(null, success ? success : null)

        })

        .catch(function (err) {

            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql

            };
            callback(error, null)
        });

}


module.exports.min = function (collectionName, criteria, callback) {

    bookshelf.knex(collectionName).min(criteria)

        .then(function (result) {

            var success = {

                tableName: collectionName,
                findResult: result[0]
            };
            callback(null, success ? success : null)

        })

        .catch(function (err) {

            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql
            };


            callback(error, null)
        });
};

module.exports.max = function (collectionName, criteria, callback) {

    bookshelf.knex(collectionName).max(criteria)


        .then(function (result) {
            var success = {

                tableName: collectionName,
                findResult: result[0]
            };
            callback(null, success ? success : null)
        })

        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql
            }

            callback(error, null)
        });
};


module.exports.sum = function (collectionName, criteria, callback) {

    bookshelf.knex(collectionName).sum(criteria)


        .then(function (result) {
            var success = {

                tableName: collectionName,
                findResult: result[0]
            }
            callback(null, success ? success : null)
        })

        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql
            }

            callback(error, null)
        });
};

module.exports.avg = function (collectionName, criteria, callback) {

    bookshelf.knex(collectionName).avg(criteria)


        .then(function (result) {
            var success = {

                tableName: collectionName,
                findResult: result[0]
            }
            callback(null, success ? success : null)
        })

        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql
            }

            callback(error, null)
        });
};

module.exports.greaterthan = function (collectionName, criteria, callback) {

    bookshelf.knex(collectionName).where(criteria.field, '>', criteria.value)

        .then(function (result) {
            var success = {

                tableName: collectionName,
                findResult: result
            }

            callback(null, success ? success : null)
        })

        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql
            }

            callback(error, null)
        });
};


module.exports.lesserthan = function (collectionName, criteria, callback) {

    bookshelf.knex(collectionName)
        .where(criteria.field, '<', criteria.value)

        .then(function (result) {
            var success = {

                tableName: collectionName,
                findResult: result
            }
            callback(null, success ? success : null)
        })

        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql

            }
            callback(error, null)
        });
};


module.exports.equal = function (collectionName, criteria, callback) {

    bookshelf.knex(collectionName)
        .where(criteria.field, '=', criteria.value)

        .then(function (result) {
            var success = {

                tableName: collectionName,
                findResult: result
            }

            callback(null, success ? success : null)
        })

        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql

            }
            callback(error, null)
        });
};


module.exports.notequal = function (collectionName, criteria, callback) {

    bookshelf.knex(collectionName)
        .where(criteria.field, '!=', criteria.value)

        .then(function (result) {
            var success = {

                tableName: collectionName,
                findResult: result
            }

            callback(null, success ? success : null)
        })

        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql
            }


            callback(error, null)
        });
};


module.exports.between = function (collectionName, criteria, callback) {

    knex(collectionName).whereBetween(criteria.fieldName, [criteria.initialValue, criteria.finalValue])

        .then(function (result) {
            var success = {

                tableName: collectionName,
                findResult: result
            }

            callback(null, success ? success : null)
        })

        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql
            }


            callback(error, null)
        });
};

module.exports.isNotNull = function (collectionName, criteria, callback) {


    knex(collectionName).select(criteria.columns.columnNames).where(criteria.condition).whereNotNull(criteria.nullCheck)
        .then(function (result) {
            var success = {

                tableName: collectionName,
                findResult: result
            }

            callback(null, success ? success : null)
        })

        .catch(function (err) {
            var error = {

                code: err.code,
                state: err.sqlState,
                message: err.sqlMessage,
                query: err.sql
            }


            callback(error, null)
        });
};



